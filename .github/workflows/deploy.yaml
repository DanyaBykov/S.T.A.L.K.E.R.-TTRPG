name: Deploy to VPS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: default
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Delete and recreate directory on VPS
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          # Stop any running containers
          cd /opt/stalker-ttrpg && docker-compose down || true
          cd /
          
          # Make sure we have proper permissions and completely remove directory
          sudo chown -R $USER:$USER /opt/stalker-ttrpg || true
          sudo chmod -R 755 /opt/stalker-ttrpg || true
          sudo rm -rf /opt/stalker-ttrpg
          sudo mkdir -p /opt/stalker-ttrpg
          sudo chown -R $USER:$USER /opt/stalker-ttrpg
          sudo chmod -R 755 /opt/stalker-ttrpg
      
    - name: Copy files to VPS
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        port: ${{ secrets.SSH_PORT }}
        source: "."
        target: "/opt/stalker-ttrpg"
    
    - name: Deploy on VPS
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          cd /opt/stalker-ttrpg
          
          # Create/update .env file
          touch .env
          grep -v "CLOUDFLARE_TUNNEL_TOKEN\|MYSQL_ROOT_PASSWORD\|MYSQL_PASSWORD" .env > .env.tmp || touch .env.tmp
          mv .env.tmp .env
          echo "CLOUDFLARE_TUNNEL_TOKEN=${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          
          # Install NVM and Node.js 20 if not already installed
          export NVM_DIR="$HOME/.nvm"
          if [ ! -d "$NVM_DIR" ]; then
            echo "Installing NVM..."
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          else
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          fi
          
          # Install and use Node.js 20
          nvm install 20
          nvm use 20
          
          # Verify Node.js version
          node -v
          
          # Build the frontend
          npm install
          npm run build

          # Deploy with Docker Compose
          docker-compose down || true
          docker-compose up -d --build